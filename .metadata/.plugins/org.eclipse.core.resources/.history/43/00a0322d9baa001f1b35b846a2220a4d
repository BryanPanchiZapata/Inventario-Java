package com.krakedev.inventarios.bdd;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;

import com.krakedev.inventarios.entidades.DetallePedido;
import com.krakedev.inventarios.entidades.EstadoPedido;
import com.krakedev.inventarios.entidades.Pedido;
import com.krakedev.inventarios.entidades.Proveedor;
import com.krakedev.inventarios.excepciones.KrakeDevException;
import com.krakedev.inventarios.utils.ConexionBDD;

public class PedidosBDD {
	public void insertar(Pedido pedido) throws KrakeDevException {
		Connection con = null;
		PreparedStatement ps = null;
		PreparedStatement psDet = null;
		ResultSet rsClave = null;
		int codigoCabecera = 0;

		Date fechaActual = new Date();
		java.sql.Date fechaSQL = new java.sql.Date(fechaActual.getTime());

		try {
			con = ConexionBDD.obtenerConexion();
			ps = con.prepareStatement("insert into cabecera_pedido (proveedor, fecha, estado_pedido) values (?,?,?)",
					Statement.RETURN_GENERATED_KEYS);
			ps.setString(1, pedido.getProveedor().getIdentificador());
			ps.setDate(2, fechaSQL);
			ps.setString(3, "S");

			ps.executeUpdate();
			rsClave = ps.getGeneratedKeys();

			if (rsClave.next()) {
				codigoCabecera = rsClave.getInt(1);
			}

			ArrayList<DetallePedido> detallesPedido = pedido.getDetalles();
			DetallePedido det;
			for (int i = 0; i < detallesPedido.size(); i++) {
				det = detallesPedido.get(i);
				psDet = con.prepareStatement(
						"insert into detalle_pedido (cabecera_pedido,producto,cantidad,subtotal,catidad_recibida) values (?,?,?,?,?)");
				psDet.setInt(1, codigoCabecera);
				psDet.setInt(2, det.getProducto().getCodigo());
				psDet.setInt(3, det.getCantidad());
				BigDecimal pv = det.getProducto().getPrecioVenta();
				BigDecimal cantidad = new BigDecimal(det.getCantidad());
				BigDecimal subtotal = pv.multiply(cantidad);
				psDet.setBigDecimal(4, subtotal);
				psDet.setInt(5, det.getCantidadRecibida());

				psDet.executeUpdate();
			}

		} catch (KrakeDevException e) {

			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new KrakeDevException("Error al insertar el pedido. Detalle: " + e.getMessage());
		}

	}

	// Actualizar cabecera pedido y detalle pedido
	public void actualizarPedido(Pedido pedido) throws KrakeDevException {
		Connection con = null;
		PreparedStatement ps = null;
		PreparedStatement psDet = null;
		PreparedStatement psHis = null;

		Date fechaActual = new Date();
		java.sql.Timestamp fechaTimeSQL = new java.sql.Timestamp(fechaActual.getTime());

		try {
			con = ConexionBDD.obtenerConexion();
			ps = con.prepareStatement("update cabecera_pedido set estado_pedido = ? where numero = ?");
			ps.setString(1, "R");
			ps.setInt(2, pedido.getCodigo());
			ps.executeUpdate();

			ArrayList<DetallePedido> detallesPedido = pedido.getDetalles();
			DetallePedido det;
			for (int i = 0; i < detallesPedido.size(); i++) {
				det = detallesPedido.get(i);
				psDet = con
						.prepareStatement("update detalle_pedido set catidad_recibida=? , subtotal=? where codigo=?");
				BigDecimal precioVenta = det.getProducto().getPrecioVenta();
				BigDecimal cantidad = new BigDecimal(det.getCantidadRecibida());
				BigDecimal subtotal = precioVenta.multiply(cantidad);
				psDet.setInt(1, det.getCantidadRecibida());
				psDet.setBigDecimal(2, subtotal);
				psDet.setInt(3, det.getCode());
				psDet.executeUpdate();

				psHis = con.prepareStatement(
						"insert into historial_stock (fecha, referencia, producto, cantidad) values (?,?,?,?)");
				psHis.setTimestamp(1, fechaTimeSQL);
				psHis.setString(2, "PEDIDO" + pedido.getCodigo());
				psHis.setInt(3, det.getProducto().getCodigo());
				psHis.setInt(4, det.getCantidad());

				psHis.executeUpdate();

			}
		} catch (KrakeDevException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new KrakeDevException("Error al insertar el pedido. Detalle: " + e.getMessage());
		}

	}

	public ArrayList<Pedido> buscarPorProveedor(String identP) throws KrakeDevException {
		ArrayList<Pedido> pedidos = new ArrayList<Pedido>();
		Connection con = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		Pedido pedido = null;
		ArrayList<Proveedor> proveedor = null;
		EstadoPedido estadoPedido = null; 
		
		ResultSet rs2 = null;
		PreparedStatement ps2 = null;
		
		 ArrayList<DetallePedido> detalles = null;
		try {
			con = ConexionBDD.obtenerConexion();
			ps = con.prepareStatement("select * from cabecera_pedido where proveedor = ?");
			ps.setString(1, identP);
			rs = ps.executeQuery();

			while (rs.next()) {
				
				int numero_cab = rs.getInt("numero_cab");
				String indentProveedor = rs.getString("proveedor");
				
				ProveedoresBDD proveedoresBDD = new ProveedoresBDD();
				proveedor = proveedoresBDD.buscar(indentProveedor);
				
				Date fecha = rs.getDate("fecha");
				String codEst = rs.getString("estado");
				
				ps2 = con.prepareStatement("select * from estados_pedido where codigo_est = ?");
				ps2.setString(1, codEst);
				rs2 = ps2.executeQuery();
				if(rs2.next()) {
					String codigo_est = rs2.getString("codigo_est");
					String descripcion = rs2.getString("descripcion");
					estadoPedido = new EstadoPedido(codigo_est, descripcion);	
				}
					
				pedido = new Pedido();
				pedido.setNumero_cab(numero_cab);
				
				detalles = new ArrayList<DetallePedido>();
				
				PedidoBDD detallesPedidoBDD = new PedidoBDD();
				detalles = detallesPedidoBDD.buscarPorCabecera(numero_cab);
				
				pedido.setDetalles(detalles);
				pedido.setProveedor(proveedor);
				pedido.setFecha(fecha);
				pedido.setEstado(estadoPedido);
				
				pedidos.add(pedido);
			}

		} catch (KrakeDevException e) {
			e.printStackTrace();
			throw e;
		} catch (SQLException e) {
			e.printStackTrace();
			throw new KrakeDevException("Error al consultar pedidos, detalle: " + e.getMessage());
		}
		return pedidos;
		
	}

}
